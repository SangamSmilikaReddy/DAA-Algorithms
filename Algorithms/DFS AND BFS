from collections import deque

def bfs(graph, start, target):
    visited = set()
    queue = deque([(start, [start])])

    while queue:
        current, path = queue.popleft()

        if current == target:
            return path  # Found the shortest path

        if current not in visited:
            visited.add(current)
            for friend in graph[current]:
                if friend not in visited:
                    queue.append((friend, path + [friend]))

    return None  # Target not reachable
    
def dfs(graph, start, target):
    stack = [(start, [start])]
    visited = []

    while stack:
        current, path = stack.pop()

        if current == target:
            return path

        if current not in visited:
            visited.add(current)
            for friend in graph[current]:
                if friend not in visited:
                    stack.append((friend, path + [friend]))

    return None  # Target not reachable

# Example usage:
graph = {
    'Alice': ['Bob', 'Charlie'],
    'Bob': ['Alice', 'David', 'Eve'],
    'Charlie': ['Alice', 'Frank'],
    'David': ['Bob'],
    'Eve': ['Bob'],
    'Frank': ['Charlie']
}

shortest_path = bfs(graph, 'Alice', 'Eve')
print("Shortest Path:", shortest_path)


friend_network = dfs(graph, 'Alice', 'Eve')
print("Friend Network:", friend_network)