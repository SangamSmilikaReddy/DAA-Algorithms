class Node:
    def __init__(self,key):
        self.key = key
        self.right = None
        self.left = None

class BST:
    def __init__(self):
        self.root = None
        
    def insert(self,key):
        self.root = self._insert(self.root,key)
        
    def _insert(self,root,key):
        if root is None:
            return Node(key)
        if key<root.key:
            root.left = self._insert(root.left,key)
        elif key>root.key:
            root.right = self._insert(root.right,key)
        return root
    
    
    def search(self,key):
        return self._search(self.root,key)
    
    def _serach(self,root,key):
        if root is None or root.key == key:
            return root
        if  key < root.key:
            return self._search(root.left,key)
        return self._search(root.right,key)
    
    
    def inorder(self):
        result = []
        self._inorder(self.root,result)
        return result
        
    def _inorder(self,root,result):
        if root:
            self._inorder(root.left,result)
            result.append(root.key)
            self._inorder(root.right,result)
            
            
    def delete(self,key):
        self._delete(self.root,key)
        
    def _delete(self,root,key):
        if root is None:
            return root
        
        if key<root.key:
            root.left = self._delete(root.left,key)
        elif key>root.key:
            root.right = self._delete(root.right,key)
        else:
            if root.left is None:
                return root.right
            elif root.right is None:
                return root.left
            
            root.key=self.root._get_min_value_node(root.right).key
            root.right = self._delete(root.right,root.key)
            
        return root
    
    def _get_min_value_node(self,node):
        current = node
        while current.left is not None:
            current = current.left
        return current
    

bst = BST()
bst.insert(50)
bst.insert(30)
bst.insert(20)
bst.insert(40)
bst.insert(70)
bst.insert(60)
bst.insert(80)

print("Original Inorder Traversal:", bst.inorder())

delete_key = 40
bst.delete(delete_key)
print(f"{delete_key} deleted from the BST.")

print("Inorder Traversal after deletion:", bst.inorder())
        
        
    
        